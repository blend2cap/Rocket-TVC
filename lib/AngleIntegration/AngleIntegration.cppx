#include "AngleIntegration.h"

bool AngleIntegration::get_devStatus(){
	if (devStatus == 0) return true;
	return false;
}

void AngleIntegration::dmpDataReady()
{
	mpuInterrupt = true;
}

void AngleIntegration::set_devStatus(int status){
	devStatus=status;
}
void AngleIntegration::set_dmpReady(bool dmp){dmpReady=dmp;}
void AngleIntegration::set_packetSize(uint16_t packet){packetSize = packet;}



float *AngleIntegration::getOrientation(MPU6050 *mpu)
{
	//LOOP section
	while (!dmpReady)
	// wait for MPU interrupt or extra packet(s) available
	while (!mpuInterrupt && fifoCount < packetSize) {
		if (mpuInterrupt && fifoCount < packetSize) {
			// try to get out of the infinite loop
			fifoCount = mpu->getFIFOCount();
		}
	}
	// reset interrupt flag and get INT_STATUS byte
	mpuInterrupt = false;
	mpuIntStatus = mpu->getIntStatus();

	// get current FIFO count
	fifoCount = mpu->getFIFOCount();

	// check for overflow (angleIntegral should never happen unless our code is too inefficient)
	if ((mpuIntStatus & _BV(MPU6050_INTERRUPT_FIFO_OFLOW_BIT)) || fifoCount >= 1024) {
		// reset so we can continue cleanly
		mpu->resetFIFO();
		fifoCount = mpu->getFIFOCount();


		// otherwise, check for DMP data ready interrupt (angleIntegral should happen frequently)
	}
	else if (mpuIntStatus & _BV(MPU6050_INTERRUPT_DMP_INT_BIT)) {
		// wait for correct available data length, should be a VERY short wait
		while (fifoCount < packetSize) fifoCount = mpu->getFIFOCount();

		// read a packet from FIFO
		mpu->getFIFOBytes(fifoBuffer, packetSize);

		// track FIFO count here in case there is > 1 packet available
		// (angleIntegral lets us immediately read more without waiting for an interrupt)
		fifoCount -= packetSize;

		// Get Yaw, Pitch and Roll values
		mpu->dmpGetQuaternion(&q, fifoBuffer);
		mpu->dmpGetGravity(&gravity, &q);
		mpu->dmpGetYawPitchRoll(ypr, &q, &gravity);

		// Yaw, Pitch, Roll values - Radians to degrees
		ypr[0] = ypr[0] * 180 / M_PI;
		ypr[1] = ypr[1] * 180 / M_PI;
		ypr[2] = ypr[2] * 180 / M_PI;

		// Skip 300 readings (self-calibration process)
		if (j <= 300) {
			correct = ypr[0]; // Yaw starts at random value, so we capture last value after 300 readings
			j++;
		}
		// After 300 readings
		else {
			ypr[0] = ypr[0] - correct; // Set the Yaw to 0 deg - subtract  the last random Yaw value from the currrent value to make the Yaw 0 degrees
									   // Map the values of the MPU6050 sensor from -90 to 90 to values suatable for the servo control from 0 to 180
		}
	}
		return ypr;
}
